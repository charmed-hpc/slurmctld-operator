ClusterName={{ ClusterName }}

# active controller
ControlMachine={{ ControlMachine }}
ControlAddr={{ ControlAddr }}


SlurmctldParameters={{ SlurmctldParameters }}

AuthType=auth/munge
AuthInfo={{AuthInfo}}
AuthAltTypes=auth/jwt
AuthAltParameters={{AuthAltParameters}}


CryptoType=crypto/munge

MailProg={{ MailProg }}

SlurmUser={{ SlurmUser }}
SlurmdUser={{ SlurmdUser }}

SlurmctldPort=6817
SlurmdPort=6818

SlurmctldPidFile={{ SlurmctldPidFile }}
SlurmdPidFile={{ SlurmdPidFile }}

SlurmctldLogFile={{ SlurmctldLogFile }}
SlurmdLogFile={{ SlurmdLogFile }}

SlurmdSpoolDir={{ SlurmdSpoolDir }}
StateSaveLocation={{ StateSaveLocation }}

PluginDir={{ PluginDir }}
PlugStackConfig={{ PlugStackConfig }}

ProctrackType={{ ProctrackType }}

AcctGatherProfileType={{ AcctGatherProfileType }}
JobAcctGatherFrequency={{ JobAcctGatherFrequency }}
JobAcctGatherType=jobacct_gather/linux

RebootProgram="/usr/sbin/reboot --reboot"

# User specified config
{{custom_config}}

{% if elasticsearch_address  %}
# Job completion elasticsearch configuration
JobCompType=jobcomp/elasticsearch
JobCompLoc={{elasticsearch_address}}
JobCompParams=timeout=5
{% endif %}

HealthCheckProgram={{HealthCheckProgram}}
HealthCheckInterval={{HealthCheckInterval}}
HealthCheckNodeState={{HealthCheckNodeState}}

# SLURMDBD CONFIGURATION {{ AccountingStorageHost }}
AccountingStorageType={{ AccountingStorageType }}
AccountingStorageHost={{ AccountingStorageHost }}
AccountingStoragePort={{ AccountingStoragePort }}
AccountingStoragePass={{ AccountingStoragePass }}

# INCLUDE CLUSTER SPECIFIC CONFIGURATION OVERRIDE
#include /etc/slurm/slurm-%c.conf

# GRES type
GresTypes=gpu

# Enumerate nodes and partitions
{% for partition_name, partition in partitions.items() %}
PartitionName={{partition_name}} Nodes={% for node_name in partition.Nodes %}{{node_name}}{{ "," if not loop.last}}{% endfor %} {% for k,v in partition.items() %}{% if k != 'Nodes' %}{{k}}={{v}} {% endif %}{% endfor %}
{% endfor %}


{% for node_name, node in nodes.items() %}
NodeName={{node_name}} {% for k,v in node.items() %}{{k}}={{v}} {% endfor %}
{% endfor %}

# Enumerate nodes in DownNodes
{% for entry in down_nodes %}
DownNodes={% for node_name in entry.DownNodes %}{{node_name}}{{ "," if not loop.last}}{% endfor %} State={{entry.State}} Reason="{{entry.Reason}}"
{% endfor %}
